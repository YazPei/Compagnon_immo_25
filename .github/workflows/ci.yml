name: CI/CD Pipeline with DagsHub

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
  DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
  DAGSHUB_MLFLOW_TRACKING_URI: ${{ secrets.DAGSHUB_MLFLOW_TRACKING_URI }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      python-cache-key: ${{ steps.cache-python.outputs.cache-hit }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache Python dependencies
      id: cache-python
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      if: steps.cache-python.outputs.cache-hit != 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install dagshub mlflow dvc[s3]

  test:
    name: Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run tests
      run: pytest app/api/tests/ -v

    - name: Code quality checks
      run: |
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
        black --check app/
        isort --check-only app/

  train-model:
    name: Train ML Model
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup DVC
      run: |
        dvc remote add -d dagshub-storage https://dagshub.com/${{ secrets.DAGSHUB_USERNAME }}/compagnon-immo.dvc
        dvc remote modify dagshub-storage --local auth basic
        dvc remote modify dagshub-storage --local user ${{ secrets.DAGSHUB_USERNAME }}
        dvc remote modify dagshub-storage --local password ${{ secrets.DAGSHUB_TOKEN }}

    - name: Pull data
      run: |
        dvc pull || echo "No data to pull"

    - name: Run ML training pipeline
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.DAGSHUB_MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
      run: |
        python app/ml/main.py

    - name: Push artifacts to DagsHub
      run: |
        dvc push || echo "No artifacts to push"

    - name: Update model registry
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.DAGSHUB_MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
      run: |
        python scripts/auto_update_models.py

  build-api:
    name: Build and Push API Docker Image
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker-compose.prod.yml
        push: true
        tags: ghcr.io/<username>/compagnon-immo-api:latest

  integration-tests:
    name: Run Integration Tests
    needs: [test, build-api]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: compagnon_immo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/compagnon_immo_test
        JWT_SECRET_KEY: test-secret-key
        TESTING: true
      run: |
        python -m pytest app/api/tests/test_*_integration.py -v

  deploy:
    name: Deploy to Production
    needs: [test, train-model, integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        # √âtapes de d√©ploiement production

    - name: Run production health checks
      run: |
        sleep 60
        echo "üè• Running production health checks..."
        # curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
