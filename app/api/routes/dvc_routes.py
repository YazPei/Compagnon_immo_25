from fastapi import APIRouter, HTTPException
from typing import Dict, Any
import logging

from app.services.dvc_connector import dvc_connector
from app.services.ml_service import ml_service

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api/v1/dvc", tags=["dvc"])

@router.get("/status")
async def get_dvc_status():
    """Voir l'√©tat de DVC et des mod√®les."""
    try:
        status = dvc_connector.check_models_status()
        logger.info("‚úÖ √âtat de DVC r√©cup√©r√© avec succ√®s")
        return status
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration de l'√©tat de DVC: {str(e)}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration de l'√©tat de DVC")

@router.post("/pull")
async def pull_dvc_models():
    """R√©cup√©rer les derniers mod√®les depuis DVC."""
    try:
        logger.info("üîÑ D√©but de la synchronisation des mod√®les avec DVC...")
        result = dvc_connector.pull_latest_models()

        if result["status"] in ["success", "warning"]:
            logger.info("üîÑ Rechargement des mod√®les ML apr√®s synchronisation DVC...")
            ml_result = ml_service.refresh_models()
            result["ml_reload"] = ml_result
            logger.info("‚úÖ Mod√®les ML recharg√©s avec succ√®s")
        else:
            logger.warning("‚ö†Ô∏è Synchronisation DVC termin√©e avec des avertissements")

        return result
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la synchronisation des mod√®les avec DVC: {str(e)}")
        raise HTTPException(status_code=500, detail="Erreur lors de la synchronisation des mod√®les avec DVC")

@router.get("/models/status")
async def get_models_status():
    """√âtat des mod√®les ML charg√©s."""
    try:
        status = ml_service.get_status()
        logger.info("‚úÖ √âtat des mod√®les ML r√©cup√©r√© avec succ√®s")
        return status
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration de l'√©tat des mod√®les ML: {str(e)}")
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration de l'√©tat des mod√®les ML")

@router.post("/models/reload")
async def reload_models():
    """Recharger les mod√®les ML."""
    try:
        logger.info("üîÑ Rechargement des mod√®les ML...")
        result = ml_service.refresh_models()
        logger.info("‚úÖ Mod√®les ML recharg√©s avec succ√®s")
        return result
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du rechargement des mod√®les ML: {str(e)}")
        raise HTTPException(status_code=500, detail="Erreur lors du rechargement des mod√®les ML")