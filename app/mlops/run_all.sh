#!/bin/bash

set -e  # Arr√™ter le script en cas d'erreur
set -o pipefail  # Propager les erreurs dans les pipes

# V√©rification des d√©pendances
echo "üîç V√©rification des d√©pendances..."

command -v python >/dev/null 2>&1 || { echo "‚ùå Python n'est pas install√©. Abandon."; exit 1; }
command -v mlflow >/dev/null 2>&1 || { echo "‚ùå MLflow n'est pas install√©. Abandon."; exit 1; }
command -v docker >/dev/null 2>&1 || { echo "‚ùå Docker n'est pas install√©. Abandon."; exit 1; }

echo "‚úÖ Toutes les d√©pendances sont install√©es."

# Variables globales
INPUT_PATH="data/raw_data.csv"
OUTPUT_PATH="data/processed"
LOG_FILE="logs/run_all.log"

# Cr√©ation des dossiers n√©cessaires
mkdir -p "$(dirname "$LOG_FILE")"
mkdir -p "$OUTPUT_PATH"

# Ex√©cution des √©tapes du pipeline
echo "üöÄ Lancement du pipeline de pr√©traitement..."
python app/services/preprocessing/preprocessing.py --input-path "$INPUT_PATH" --output-path "$OUTPUT_PATH" | tee -a "$LOG_FILE"

echo "‚úÖ Pipeline termin√© avec succ√®s."