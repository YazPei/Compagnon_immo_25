services:
  # Base de données PostgreSQL pour Airflow
  postgres-airflow:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ml_net
    profiles: ["airflow"]

  # Redis pour les tâches en arrière-plan
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # Port hôte changé pour éviter le conflit
    networks:
      - ml_net

  # MLflow pour le suivi des expériences
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.8.1
    ports:
      - "5050:5050"
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5050
      --backend-store-uri sqlite:///mlflow.db
      --default-artifact-root /mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    networks:
      - ml_net

  # Airflow Webserver
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      bash -c "
        airflow db upgrade &&
        airflow webserver --port 8081
      "
    ports:
      - "8081:8081"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
      AIRFLOW_UID: 50000
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs/airflow:/opt/airflow/logs
    depends_on:
      - postgres-airflow
      - redis
    networks:
      - ml_net
    profiles: ["airflow"]

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    command: airflow scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW_UID: 50000
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs/airflow:/opt/airflow/logs
    depends_on:
      - postgres-airflow
      - redis
    networks:
      - ml_net
    profiles: ["airflow"]

  # API FastAPI
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5050
    depends_on:
      - mlflow
      - redis
    networks:
      - ml_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service DVC pour les pipelines de données
  dvc-runner:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - ./data:/app/data
      - ./exports:/app/exports
    working_dir: /app
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5050
    depends_on:
      - mlflow
    networks:
      - ml_net
    profiles: ["dvc"]

# Définir les volumes une seule fois à la racine
volumes:
  postgres_data:
  mlflow_artifacts:

# Définir les networks une seule fois à la racine
networks:
  ml_net:
    driver: bridge

# Le fichier est valide, aucune correction nécessaire.

# Le fichier est valide, aucune correction nécessaire.

