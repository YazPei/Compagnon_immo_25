version: "3.9"

# Réseau partagé
networks:
  ml_net:
    external: true

# Volumes persistants
volumes:
  airflow_db:
  mlflow_artifacts:

services:
  # --------- MLflow ---------
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.15.1
    profiles: ["mlflow"]  # Ne pas lancer par défaut
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5050
      --backend-store-uri ${MLFLOW_BACKEND_STORE_URI:-sqlite:///mlflow.db}
      --default-artifact-root ${MLFLOW_ARTIFACT_URI:-file:/mlflow_artifacts}
    ports:
      - "${MLFLOW_HOST_PORT:-5050}:5050"
    environment:
      MLFLOW_BACKEND_STORE_URI: "${MLFLOW_BACKEND_STORE_URI:-sqlite:///mlflow.db}"
      MLFLOW_ARTIFACT_URI: "${MLFLOW_ARTIFACT_URI:-file:/mlflow_artifacts}"
    networks:
      - ml_net
    volumes:
      - mlflow_artifacts:/mlflow_artifacts

  # --------- Airflow ---------
  airflow:
    image: apache/airflow:2.9.0
    profiles: ["airflow"]
    depends_on:
      - mlflow
    command: >
      bash -c "
      airflow db init &&
      airflow users create --username admin --password admin --firstname a --lastname b --role Admin --email admin@example.com &&
      airflow webserver & airflow scheduler
      "
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__EXECUTOR: "LocalExecutor"
      AIRFLOW__CORE__DEFAULT_TIMEZONE: "Europe/Paris"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "sqlite:////airflow/airflow.db"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs/airflow:/opt/airflow/logs
      - ./dags/airflow.cfg:/opt/airflow/airflow.cfg:ro
    networks:
      - ml_net

  # --------- API ---------
  api:
    image: "tiangolo/uvicorn-gunicorn-fastapi:python3.9"
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
    env_file:
      - .env
    networks:
      - ml_net
    depends_on:
      - mlflow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --------- Redis ---------
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - ml_net

  # --------- DVC Runner ---------
  dvc-runner:
    build:
      context: .
      dockerfile: mlops/2_dvc/Dockerfile
    volumes:
      - .:/app
      - ./.dvc:/app/.dvc
    working_dir: /app
    tty: true
    stdin_open: true
    env_file:
      - .env
    environment:
      MLFLOW_TRACKING_URI: "http://mlflow:5050"
    networks:
      - ml_net
    depends_on:
      mlflow:
        condition: service_healthy
    command: ["python", "/app/mlops/6_Regression/2_LGBM/train_lgbm.py"]
    env_file:
      - .env
    networks:
      - ml_net
    profiles: ["regression"]

  analyse:
    build:
      context: .
      dockerfile: mlops/6_Regression/4_Analyse/Dockerfile.analyse.REG
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./mlops/6_Regression/4_Analyse:/app/mlops/6_Regression/4_Analyse
      - ./exports:/app/exports
      - ./data:/app/data
    command: ["python", "/app/mlops/6_Regression/4_Analyse/analyse.py"]
    env_file:
      - .env
    networks:
      - ml_net
    profiles: ["regression"]

  # --------- Séries Temporelles ----------
  split:
    build:
      context: .
      dockerfile: mlops/7_Serie_temporelle/1_SPLIT/Dockerfile.split.ST
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./exports:/app/exports
      - ./data:/app/data
      - ./mlops:/app/mlops
    entrypoint: ["python", "/app/mlops/7_Serie_temporelle/1_SPLIT/load_split.py"]
    env_file:
      - .env
    environment:
      - RUN_MODE=full
      - ST_SUFFIX=${ST_SUFFIX:-q12}
    networks:
      - ml_net
    profiles: ["series"]

  decompose:
    build:
      context: .
      dockerfile: mlops/7_Serie_temporelle/2_Decompose/Dockerfile.decompose.ST
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./exports:/app/exports
      - ./mlops:/app/mlops
    command: ["python","/app/mlops/7_Serie_temporelle/2_Decompose/seasonal_decomp.py",
          "--input-folder","/app/exports/st",
          "--output-folder","/app/exports/st"]
    env_file:
      - .env
    environment:
      - RUN_MODE=full
      - ST_SUFFIX=${ST_SUFFIX:-q12}
    networks:
      - ml_net
    profiles: ["series"]

  train_sarimax:
    build:
      context: .
      dockerfile: mlops/7_Serie_temporelle/3_SARIMAX/Dockerfile.sarimax.ST
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./exports:/app/exports
      - ./mlops:/app/mlops
    command: ["python","/app/mlops/7_Serie_temporelle/3_SARIMAX/sarimax_api.py",
          "--input-folder","/app/exports/st",
          "--output-folder","/app/exports/st"]
    env_file:
      - .env
    environment:
      - RUN_MODE=full
      - ST_SUFFIX=${ST_SUFFIX:-q12}
    networks:
      - ml_net
    profiles: ["series"]

  evaluate:
    build:
      context: .
      dockerfile: mlops/7_S
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./exports:/app/exports
      - ./mlops:/app/mlops
      - ./data:/app/data
    entrypoint: ["python", "/app/mlops/7_Serie_temporelle/4_EVALUATE/evaluate_ST.py"]
    env_file:
      - .env
    environment:
      - RUN_MODE=full
      - ST_SUFFIX=${ST_SUFFIX:-q12}
    networks:
      - ml_net
    profiles: ["series"]

  series_pipeline:
    build:
      context: .
      dockerfile: mlops/7_Serie_temporelle/Dockerfile.series_pipeline
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./mlops:/app/mlops
      - ./data:/app/data
      - ./exports:/app/exports
    command: ["python", "/app/mlops/7_Serie_temporelle/pipeline.py", "--help"]
    env_file:
      - .env
    networks:
      - ml_net
    profiles: ["series"]

  # --------- DVC ----------
  dvc-runner:
    build:
      context: .
      dockerfile: mlops/2_dvc/Dockerfile
    volumes:
      - .:/app
      - ./.dvc:/app/.dvc
    working_dir: /app
    tty: true
    stdin_open: true
    env_file:
      - .env
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5050
    networks:
      - ml_net
    depends_on:
      mlflow:
        condition: service_healthy


  #------------mlflow---------

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.15.1
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5050
      --backend-store-uri ${MLFLOW_BACKEND_STORE_URI}
      --default-artifact-root ${MLFLOW_ARTIFACT_URI}
    ports:
      - "5050:5050"
    environment:
      MLFLOW_BACKEND_STORE_URI: "${MLFLOW_BACKEND_STORE_URI:-sqlite:///mlflow.db}"
      MLFLOW_ARTIFACT_URI: "${MLFLOW_ARTIFACT_URI:-file:/mlflow_artifacts}"

  # --------- Airflow ----------
  airflow:
    image: apache/airflow:2.9.0
    depends_on:
      - mlflow
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__EXECUTOR: "LocalExecutor"
      AIRFLOW__CORE__DEFAULT_TIMEZONE: "Europe/Paris"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "sqlite:////airflow/airflow.db"
    command: >
      bash -c "
      airflow db init &&
      airflow users create --username admin --password admin --firstname a --lastname b --role Admin --email admin@example.com &&
      airflow webserver & airflow scheduler
      "
    volumes:
      - ./dags:/opt/airflow/dags
    networks:
      - ml_net

  api:
    image: "tiangolo/uvicorn-gunicorn-fastapi:python3.9"
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
    env_file:
      - .env
    networks:
      - ml_net
    depends_on:
      - mlflow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3

# Removed duplicate networks definition
    volumes:
      - ./:/opt/airflow/repo
      - ./dags:/opt/airflow/dags
    working_dir: /opt/airflow
    networks:
      - ml_net

  api:
    image: "tiangolo/uvicorn-gunicorn-fastapi:python3.9"
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
    env_file:
      - .env
    networks:
      - ml_net
    depends_on:
      - redis
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

volumes:
  airflow_db:

networks:
  ml_net:
    external: true

