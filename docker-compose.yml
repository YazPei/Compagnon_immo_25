version: '3.8'

services:
# --------- Préparation des données ----------

  fusion_geo:
    build:
      context: .
      dockerfile: Dockerfile.fusion
    volumes:
      - ./data:/app/data
      - ./mlops/fusion:/app/mlops/fusion
    command: >
      python /app/mlops/fusion/fusion_geo_dvf.py
      --folder-path1 /app/data
      --folder-path2 /app/data
      --output-folder /app/data
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

  preprocessing:
    build:
      context: .
      dockerfile: Dockerfile.preprocessing
    volumes:
      - ./data:/app/data
      - ./mlops/preprocessing:/app/mlops/preprocessing
    command: >
      python /app/mlops/preprocessing/preprocessing.py
      --input-path /data
      --output-folder1 /app/data
      --output-folder2 /app/data
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

  clustering:
    build:
      context: .
      dockerfile: Dockerfile.clustering
    volumes:
      - ./data:/app/data
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - mlflow
    command: >
      python mlops/clustering/Clustering.py
      --input-path data/train_clean.csv
      --output-path1 data/df_cluster.csv
      --output-path2 data/df_sales_clean_ST.csv


  encode:
    build:
      context: .
      dockerfile: Dockerfile.encoding.REG
    volumes:
      - ./mlops/Regression:/app/mlops
      - ./data:/app/data
      - ./exports:/app/exports
    command: >
      python /app/mlops/encoding.py
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

# --------- Régression ----------
  train_lgbm:
    build:
      context: .
      dockerfile: Dockerfile.lgbm.REG
    volumes:
      - ./mlops/Regression:/app/mlops
      - ./exports:/app/exports
    command: >
      python /app/mlops/train_lgbm.py
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

  train_xgb:
    build:
      context: .
      dockerfile: Dockerfile.xgb.REG
    volumes:
      - ./mlops:/app/mlops
      - ./exports:/app/exports
    command: >
      python /app/mlops/Regression/train_xgb.py
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

  analyse:
    build:
      context: .
      dockerfile: Dockerfile.analyse.REG
    volumes:
      - ./mlops:/app/mlops
      - ./exports:/app/exports
    command: >
      python /app/mlops/Regression/analyse.py
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

# --------- Séries Temporelles ----------
  split:
    build:
      context: .
      dockerfile: Dockerfile.split.ST
    volumes:
      - ./exports:/app/exports
      - ./data:/app/data
    command: >
      python /app/mlops/Serie_temporelle/load_split.py
      --input-path /app/data/df_sales_clean_ST.csv
      --output-folder /app/exports/st
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

  decompose:
    build:
      context: .
      dockerfile: Dockerfile.decompose.ST
    volumes:
      - ./exports:/app/exports
    command: >
      python /app/mlops/Serie_temporelle/seasonal_decomp.py
      --input-folder /app/exports/st
      --output-folder /app/exports/st
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

  train_sarimax:
    build:
      context: .
      dockerfile: Dockerfile.sarimax.ST
    volumes:
      - ./exports:/app/exports
    command: >
      python /app/mlops/Serie_temporelle/sarimax_train.py
      --input-folder /app/exports/st
      --output-folder /app/exports/st
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

  evaluate:
    build:
      context: .
      dockerfile: Dockerfile.evaluate.ST
    volumes:
      - ./exports:/app/exports
    command: >
      python /app/mlops/Serie_temporelle/metrics.py
      --model-folder /app/exports/st
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

# --------- Tracking MLflow ----------
  mlflow:
    image: ghcr.io/mlflow/mlflow
    ports:
      - "5001:5000"
    volumes:
      - ./mlruns:/mlflow/mlruns
    command: mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root ./mlruns --host 0.0.0.0

# --------- Scripts Factices ----------
  regression_script:
    image: busybox
    command: echo "Présence logique de regression/run_all.sh"

  st_script:
    image: busybox
    command: echo "Présence logique de Serie_temporelle/run_all_st.sh"

# --------- Exécution du pipeline complet ----------
  run_full:
    build:
      context: .
      dockerfile: Dockerfile.run
    volumes:
      - .:/home/mlopsuser/app
    depends_on:
      - regression_script
      - st_script
    tty: true
    stdin_open: true
    environment:
      - RUN_MODE=full

