# docker-compose.yml (complet, rien de supprimé ; Airflow via image officielle)
version: "3.9"
services:
  postgres-airflow:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [ml_net]
    profiles: ["airflow"]

  redis:
    image: redis:7-alpine
    ports: ["6380:6379"]
    networks: [ml_net]

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.8.1
    command: >
      mlflow server --host 0.0.0.0 --port 5050
      --backend-store-uri sqlite:///mlflow.db
      --default-artifact-root /mlflow/artifacts
    ports: ["5050:5050"]
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    networks: [ml_net]

  # Airflow (on garde le service, on change SEULEMENT l'image)
  airflow-webserver:
    image: apache/airflow:2.9.3-python3.10
    command: >
      bash -c "
        pip install -r /opt/airflow/repo/requirements.txt &&
        airflow db upgrade &&
        airflow webserver --port 8081
      "
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
      AIRFLOW_UID: 50000
      MLFLOW_TRACKING_URI: http://mlflow:5050
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs/airflow:/opt/airflow/logs
      - .:/opt/airflow/repo
      - ./data:/opt/airflow/data
      - ./exports:/opt/airflow/exports
      - ./mlops:/opt/airflow/mlops
    depends_on: [postgres-airflow, redis, mlflow]
    ports: ["8081:8081"]
    networks: [ml_net]
    profiles: ["airflow"]

  airflow-scheduler:
    image: apache/airflow:2.9.3-python3.10
    command: >
      bash -c "
        pip install -r /opt/airflow/repo/requirements.txt &&
        airflow scheduler
      "
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW_UID: 50000
      MLFLOW_TRACKING_URI: http://mlflow:5050
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs/airflow:/opt/airflow/logs
      - .:/opt/airflow/repo
      - ./data:/opt/airflow/data
      - ./exports:/opt/airflow/exports
      - ./mlops:/opt/airflow/mlops
    depends_on: [postgres-airflow, redis, mlflow]
    networks: [ml_net]
    profiles: ["airflow"]

  # API FastAPI (on garde le service ; il doit savoir lancer uvicorn)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5050
    depends_on: [mlflow, redis]
    ports: ["8000:8000"]
    networks: [ml_net]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Runner DVC (gardé)
  dvc-runner:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - ./data:/app/data
      - ./exports:/app/exports
    working_dir: /app
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5050
    depends_on: [mlflow]
    networks: [ml_net]
    profiles: ["dvc"]

  # Service de tests (gardé)
  api-test:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - API_BASE_URL=http://api:8000/api/v1
      - MLFLOW_TRACKING_URI=http://mlflow:5050
      - PYTHONPATH=/app
    depends_on:
      api:
        condition: service_healthy
      mlflow:
        condition: service_started
    networks: [ml_net]
    command: python -m pytest app/api/tests -v
    profiles: ["test"]

volumes:
  postgres_data:
  mlflow_artifacts:

networks:
  ml_net:
    driver: bridge
