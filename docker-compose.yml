# docker-compose.yml — Compagnon Immo (version corrigée)
# - Aligne chemins Dockerfile/scripts avec le Makefile
# - Fixe MLflow (backend + artifact root) et healthcheck
# - Uniformise mounts, users, networks, depends_on (service_healthy)
# - Ajoute des profiles (regression, series) pour cibler les runs

services:
  # --------- Pipeline de lancement ----------
  base:
    build:
      context: .
      dockerfile: mlops/Dockerfile.base
    image: compagnon_immo-base:latest

  run_full:
    build:
      context: .
      dockerfile: mlops/1_import_donnees/Dockerfile.run
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - .:/app
    tty: true
    stdin_open: true
    env_file:
      - .env
    environment:
      - RUN_MODE=full
    networks:
      - ml_net

  # --------- Préparation des données ----------
  fusion_geo:
    build:
      context: .
      dockerfile: mlops/3_fusion/Dockerfile.fusion
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - .:/app
      - ./mlops:/app/mlops
    env_file:
      - .env
    networks:
      - ml_net
    command: ["bash", "-lc", "python mlops/3_fusion/fusion.py"]
    profiles: ["regression", "series"]

  preprocessing:
    build:
      context: .
      dockerfile: mlops/preprocessing_4/Dockerfile.preprocessing
    image: compagnon_immo-preprocessing
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - .:/app
      - ./data:/app/data
      - ./mlops/preprocessing_4:/app/mlops/preprocessing_4
    env_file:
      - .env
    command: >-
      python mlops/preprocessing_4/preprocessing.py
      --input-path /app/data
      --output-path /app/data
    networks:
      - ml_net
    profiles: ["regression", "series"]

  clustering:
    build:
      context: .
      dockerfile: mlops/5_clustering/Dockerfile.clustering
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./data:/app/data
      - ./mlops:/app/mlops
    env_file:
      - .env
    networks:
      - ml_net
    command: >-
      python mlops/5_clustering/Clustering.py
      --input-path /app/data/train_clean.csv
      --output-path1 /app/data/df_cluster.csv
      --output-path2 /app/data/df_sales_clean_ST.csv
    profiles: ["regression", "series"]

  encode:
    build:
      context: .
      dockerfile: mlops/6_Regression/1_Encoding/Dockerfile.encoding.REG
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./mlops/6_Regression/1_Encoding:/app/mlops/6_Regression/1_Encoding
      - ./data:/app/data
      - ./exports:/app/exports
    command: ["python", "/app/mlops/6_Regression/1_Encoding/encoding.py"]
    env_file:
      - .env
    networks:
      - ml_net
    profiles: ["regression"]

  # --------- Régression ----------
  train_lgbm:
    build:
      context: .
      dockerfile: mlops/6_Regression/2_LGBM/Dockerfile.lgbm.REG
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./mlops/6_Regression/2_LGBM:/app/mlops/6_Regression/2_LGBM
      - ./data:/app/data
      - ./exports:/app/exports
    command: ["python", "/app/mlops/6_Regression/2_LGBM/train_lgbm.py"]
    env_file:
      - .env
    networks:
      - ml_net
    profiles: ["regression"]

  analyse:
    build:
      context: .
      dockerfile: mlops/6_Regression/4_Analyse/Dockerfile.analyse.REG
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./mlops/6_Regression/4_Analyse:/app/mlops/6_Regression/4_Analyse
      - ./exports:/app/exports
      - ./data:/app/data
    command: ["python", "/app/mlops/6_Regression/4_Analyse/analyse.py"]
    env_file:
      - .env
    networks:
      - ml_net
    profiles: ["regression"]

  # --------- Séries Temporelles ----------
  split:
    build:
      context: .
      dockerfile: mlops/7_Serie_temporelle/1_SPLIT/Dockerfile.split.ST
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./exports:/app/exports
      - ./data:/app/data
      - ./mlops:/app/mlops
    entrypoint: ["python", "/app/mlops/7_Serie_temporelle/1_SPLIT/load_split.py"]
    env_file:
      - .env
    environment:
      - RUN_MODE=full
      - ST_SUFFIX=${ST_SUFFIX:-q12}
    networks:
      - ml_net
    profiles: ["series"]

  decompose:
    build:
      context: .
      dockerfile: mlops/7_Serie_temporelle/2_Decompose/Dockerfile.decompose.ST
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./exports:/app/exports
      - ./mlops:/app/mlops
    command: >-
      python /app/mlops/7_Serie_temporelle/2_Decompose/seasonal_decomp.py
      --input-folder /app/exports/st
      --output-folder /app/exports/st
    env_file:
      - .env
    environment:
      - RUN_MODE=full
      - ST_SUFFIX=${ST_SUFFIX:-q12}
    networks:
      - ml_net
    profiles: ["series"]

  train_sarimax:
    build:
      context: .
      dockerfile: mlops/7_Serie_temporelle/3_SARIMAX/Dockerfile.sarimax.ST
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./exports:/app/exports
      - ./mlops:/app/mlops
    command: >-
      python /app/mlops/7_Serie_temporelle/3_SARIMAX/sarimax_api.py
      --input-folder /app/exports/st
      --output-folder /app/exports/st
    env_file:
      - .env
    environment:
      - RUN_MODE=full
      - ST_SUFFIX=${ST_SUFFIX:-q12}
    networks:
      - ml_net
    profiles: ["series"]

  evaluate:
    build:
      context: .
      dockerfile: mlops/7_Serie_temporelle/4_EVALUATE/Dockerfile.evaluate.ST
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./exports:/app/exports
      - ./mlops:/app/mlops
      - ./data:/app/data
    entrypoint: ["python", "/app/mlops/7_Serie_temporelle/4_EVALUATE/evaluate_ST.py"]
    env_file:
      - .env
    environment:
      - RUN_MODE=full
      - ST_SUFFIX=${ST_SUFFIX:-q12}
    networks:
      - ml_net
    profiles: ["series"]

  series_pipeline:
    build:
      context: .
      dockerfile: mlops/7_Serie_temporelle/Dockerfile.series_pipeline
    user: "${UID:-1000}:${GID:-1000}"
    volumes:
      - ./mlops:/app/mlops
      - ./data:/app/data
      - ./exports:/app/exports
    command: ["python", "/app/mlops/7_Serie_temporelle/pipeline.py", "--help"]
    env_file:
      - .env
    networks:
      - ml_net
    profiles: ["series"]

  # --------- DVC ----------
  dvc-runner:
    build:
      context: .
      dockerfile: mlops/2_dvc/Dockerfile
    volumes:
      - .:/app
      - ./.dvc:/app/.dvc
    working_dir: /app
    tty: true
    stdin_open: true
    env_file:
      - .env        
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5050
    command: ["sh", "-lc", "./run_dvc.sh"]
    networks:
      - ml_net
    depends_on:
      mlflow:
        condition: service_healthy


  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.15.1
    command: >
      mlflow server
      --backend-store-uri sqlite:///mlflow.db
      --default-artifact-root file:///mlartifacts
      --host 0.0.0.0
      --port 5050
    volumes:
      - ./mlflow-data:/mlartifacts
      - ./mlflow-data:/mlruns
    ports:
      - "5050:5050"
    networks:
      - ml_net
    healthcheck:
      test: ["CMD-SHELL", "curl -s -X POST -H 'Content-Type: application/json' -d '{}' http://localhost:5050/api/2.0/mlflow/experiments/list >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10


networks:
  ml_net:
    driver: bridge

